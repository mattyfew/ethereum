const assert = require('assert')
const ganache = require('ganache-cli')
const Web3 = require('web3')
const web3 = new Web3(ganache.provider())

const compiledFactory = require('../ethereum/build/CampaignFactory.json')
const compiledCampaign = require('../ethereum/build/Campaign.json')

let accounts
let factory
let campaignAddress
let campaign

beforeEach(async () => {
    // we get 10 accounts generated by ganache
    accounts = await web3.eth.getAccounts()

    // this line creates the 'idea' of a web3 contract, and we need to pull in the
    // ABI which is located at 'compiledFactory.interface'
    factory = await new web3.eth.Contract(JSON.parse(compiledFactory.interface))
        // when we run deploy, we must pass in the actual bytecode of the contract
        // into the data prop
        .deploy({ data: compiledFactory.bytecode })
        .send({ from: accounts[0], gas: '1000000' })

    await factory.methods.createCampaign('100').send({
        // accounts[0] will be the manager of this campaign
        from: accounts[0],
        gas: '1000000'
    })

    // getDeployedCampaigns is a view function, which means we are not changing any data
    // so we simply want to call it
    const [ campaignAddress ] = await factory.methods.getDeployedCampaigns().call()

    // if we want to access the Contracts that have already been created, then we
    // pass the campaignAddress as the second arg to the Contract constructor
    campaign = await new web3.eth.Contract(
        JSON.parse(compiledCampaign.interface),
        campaignAddress
    )
})

describe('Campaigns', () => {
    it('deploys a factory and a campaign', () => {
        assert.ok(factory.options.address)
        assert.ok(campaign.options.address)
    })

    it('marks caller as the campaign manager', async () => {
        // in our contract, since the manager var was marked as public,
        // we automatically get a method to retrieve the value of that var 'manager'
        const manager = await campaign.methods.manager().call()

        assert.equal(accounts[0], manager)
    })

    it('allows people to contribute money and marks them as approvers', async () => {
        // contribute does not take any args, instead we pass along a value
        await campaign.methods.contribute().send({
            value: '200',
            from: accounts[1]
        })

        // campaign.methods.approvers() is the function that allows us to access approvers
        // so we pass in the account address to the approvers method, and this will do
        // the lookup for that address on the mapping
        // isContributor will be a bool
        // when doing data lookup (not modifying) we use .call() *******
        const isContributor = await campaign.methods.approvers(accounts[1]).call()
        assert(isContributor)
    })

    it('requires a minimum contribution', async () => {
        // we want to test that if the user does not provide the min contribution
        // that the contract will not allow them to become an approver. So
        // we use a try/catch to catch the error
        try {
            await campaign.methods.contribute().send({
                value: '5',
                from: accounts[1]
            })
            assert(false) // this will assert that the test failed because we
                          // shouldn't be able to get to this line
        } catch (e) {
            assert(e)
        }
    })

    it('allows a manager to make a payment request', async () => {
        // createRequest needs args: description, value, recipient
        // with function calls that modify data, we need to call send() and pass from and gas
        await campaign.methods
            .createRequest('Buy batteries', '100', accounts[1])
            .send({
                from: accounts[0],
                gas: '1000000'
            })

        // requests() is the auto generated getter method for the array, and we pass the index we want
        // to get, in this case 0
        // note: a request is a struct
        const request = await campaign.methods.requests(0).call()

        assert.equal('Buy batteries', request.description)
    })

    it('processes requests', async () => {
        await campaign.methods.contribute().send({
            from: accounts[0],
            value: web3.utils.toWei('10', 'ether')
        })

        await campaign.methods
            .createRequest('desc doesnt matter here', web3.utils.toWei('5', 'ether'), accounts[1])
            .send({ from: accounts[0], gas: '1000000' })

        // 0 is the index of the request
        await campaign.methods.approveRequest(0)
            .send({ from: accounts[0], gas: '1000000' })

        // checking finalize request
        await campaign.methods.finalizeRequest(0)
            .send({ from: accounts[0], gas: '1000000' })


        let balance = await web3.eth.getBalance(accounts[1])
        balance = web3.utils.fromWei(balance, 'ether')
        balance = parseFloat(balance) // take a string and tries to turn it into a decimal number

        // we don't currently have a way for ganache to reset the balances of the accounts
        // this is a limitation of the ganache library
        // we use > because of the gas consumption and not knowing exactly how much the balance should be
        assert(balance > 104)
    })
})
